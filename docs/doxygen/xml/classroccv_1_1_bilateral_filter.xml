<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classroccv_1_1_bilateral_filter" kind="class" language="C++" prot="public" final="yes">
    <compoundname>roccv::BilateralFilter</compoundname>
    <basecompoundref refid="classroccv_1_1_i_operator" prot="public" virt="non-virtual">roccv::IOperator</basecompoundref>
    <includes refid="op__bilateral__filter_8hpp" local="no">op_bilateral_filter.hpp</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classroccv_1_1_bilateral_filter_1ae9cae69f582111f5b9aba549d767d0de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>roccv::BilateralFilter::BilateralFilter</definition>
        <argsstring>()</argsstring>
        <name>BilateralFilter</name>
        <qualifiedname>roccv::BilateralFilter::BilateralFilter</qualifiedname>
        <briefdescription>
<para>Constructs a <ref refid="classroccv_1_1_bilateral_filter" kindref="compound">BilateralFilter</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/spolifro/Documents/rocCV/include/op_bilateral_filter.hpp" line="42" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classroccv_1_1_bilateral_filter_1aaa74a2f76a0ced8f47ba7e48a440a2a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void roccv::BilateralFilter::operator()</definition>
        <argsstring>(hipStream_t stream, const roccv::Tensor &amp;input, const roccv::Tensor &amp;output, int diameter, float sigmaColor, float sigmaSpace, const eBorderType borderMode, const float4 borderValue=make_float4(0, 0, 0, 0), const eDeviceType device=eDeviceType::GPU)</argsstring>
        <name>operator()</name>
        <qualifiedname>roccv::BilateralFilter::operator()</qualifiedname>
        <param>
          <type>hipStream_t</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="classroccv_1_1_tensor" kindref="compound">roccv::Tensor</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const <ref refid="classroccv_1_1_tensor" kindref="compound">roccv::Tensor</ref> &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>int</type>
          <declname>diameter</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sigmaColor</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sigmaSpace</declname>
        </param>
        <param>
          <type>const <ref refid="operator__types_8h_1ace89cf8b7e2015ff86ed87ec9ce229c0" kindref="member">eBorderType</ref></type>
          <declname>borderMode</declname>
        </param>
        <param>
          <type>const float4</type>
          <declname>borderValue</declname>
          <defval>make_float4(0, 0, 0, 0)</defval>
        </param>
        <param>
          <type>const <ref refid="util__enums_8h_1a4ec2e35c9447ccc1764ba80c1490a114" kindref="member">eDeviceType</ref></type>
          <declname>device</declname>
          <defval><ref refid="util__enums_8h_1a4ec2e35c9447ccc1764ba80c1490a114a52f9ec21735243ad9917cda3ca077d32" kindref="member">eDeviceType::GPU</ref></defval>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="classroccv_1_1_bilateral_filter" kindref="compound">BilateralFilter</ref> object. The object can be used to apply a bilateral filter on images in a tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>Limitations:</para>
<para>Input: Supported TensorLayout(s): [NHWC, HWC] Channels: [1, 3, 4] Supported DataType(s): [U8]</para>
<para>Output: Supported TensorLayout(s): [NHWC, HWC] Channels: [1, 3, 4] Supported DataType(s): [U8]</para>
<para>Input/Output dependency <verbatim>  Property      |  Input == Output
 -------------- | -------------
  Data Layout   | Yes
  Data Type     | Yes
  Number        | Yes
  Channels      | Yes
  Width         | Yes
  Height        | Yes
</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>The HIP stream to run this operation on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">input</parametername>
</parameternamelist>
<parameterdescription>
<para>Input tensor with image batch data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output</parametername>
</parameternamelist>
<parameterdescription>
<para>Output tensor for storing modified image batch data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">diameter</parametername>
</parameternamelist>
<parameterdescription>
<para>bilateral filter diameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sigmaColor</parametername>
</parameternamelist>
<parameterdescription>
<para>Gaussian exponent for color difference, expected to be positive, if it isn&apos;t, will be set to 1.0 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sigmaSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>Gaussian exponent for position difference expected to be positive, if it isn&apos;t, will be set to 1.0 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">borderMode</parametername>
</parameternamelist>
<parameterdescription>
<para>A border type to identify the pixel extrapolation method (e.g. BORDER_TYPE_CONSTANT or BORDER_TYPE_REPLICATE) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">borderValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Set as 0 unless using a constant border. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">device</parametername>
</parameternamelist>
<parameterdescription>
<para>The device which this operation should run on. (Default: <ref refid="util__enums_8h_1a4ec2e35c9447ccc1764ba80c1490a114a52f9ec21735243ad9917cda3ca077d32" kindref="member">eDeviceType::GPU</ref>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/spolifro/Documents/rocCV/include/op_bilateral_filter.hpp" line="93" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classroccv_1_1_bilateral_filter_1a0e60f108feb630dfe36d792503c791dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>roccv::BilateralFilter::~BilateralFilter</definition>
        <argsstring>()</argsstring>
        <name>~BilateralFilter</name>
        <qualifiedname>roccv::BilateralFilter::~BilateralFilter</qualifiedname>
        <briefdescription>
<para>Destroy the <ref refid="classroccv_1_1_bilateral_filter" kindref="compound">BilateralFilter</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/spolifro/Documents/rocCV/include/op_bilateral_filter.hpp" line="48" column="5"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Class for managing the Bilateral filter operator. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>roccv::BilateralFilter</label>
        <link refid="classroccv_1_1_bilateral_filter"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>roccv::IOperator</label>
        <link refid="classroccv_1_1_i_operator"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>roccv::BilateralFilter</label>
        <link refid="classroccv_1_1_bilateral_filter"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>roccv::IOperator</label>
        <link refid="classroccv_1_1_i_operator"/>
      </node>
    </collaborationgraph>
    <location file="/mnt/c/Users/spolifro/Documents/rocCV/include/op_bilateral_filter.hpp" line="36" column="1" bodyfile="/mnt/c/Users/spolifro/Documents/rocCV/include/op_bilateral_filter.hpp" bodystart="36" bodyend="96"/>
    <listofallmembers>
      <member refid="classroccv_1_1_bilateral_filter_1ae9cae69f582111f5b9aba549d767d0de" prot="public" virt="non-virtual"><scope>roccv::BilateralFilter</scope><name>BilateralFilter</name></member>
      <member refid="classroccv_1_1_bilateral_filter_1aaa74a2f76a0ced8f47ba7e48a440a2a2" prot="public" virt="non-virtual"><scope>roccv::BilateralFilter</scope><name>operator()</name></member>
      <member refid="classroccv_1_1_bilateral_filter_1a0e60f108feb630dfe36d792503c791dd" prot="public" virt="non-virtual"><scope>roccv::BilateralFilter</scope><name>~BilateralFilter</name></member>
      <member refid="classroccv_1_1_i_operator_1ab7247b4825f7803f16d0d48fa6ad4226" prot="public" virt="virtual"><scope>roccv::BilateralFilter</scope><name>~IOperator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
