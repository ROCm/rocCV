<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="casting_8hpp" kind="file" language="C++">
    <compoundname>casting.hpp</compoundname>
    <includes local="no">algorithm</includes>
    <includes refid="type__traits_8hpp" local="yes">core/detail/type_traits.hpp</includes>
    <includedby refid="interpolation__wrapper_8hpp" local="yes">/mnt/c/Users/spolifro/Documents/rocCV/include/core/wrappers/interpolation_wrapper.hpp</includedby>
    <includedby refid="bilateral__filter__device_8hpp" local="yes">/mnt/c/Users/spolifro/Documents/rocCV/include/kernels/device/bilateral_filter_device.hpp</includedby>
    <includedby refid="composite__device_8hpp" local="yes">/mnt/c/Users/spolifro/Documents/rocCV/include/kernels/device/composite_device.hpp</includedby>
    <includedby refid="normalize__device_8hpp" local="yes">/mnt/c/Users/spolifro/Documents/rocCV/include/kernels/device/normalize_device.hpp</includedby>
    <includedby refid="bilateral__filter__host_8hpp" local="yes">/mnt/c/Users/spolifro/Documents/rocCV/include/kernels/host/bilateral_filter_host.hpp</includedby>
    <includedby refid="composite__host_8hpp" local="yes">/mnt/c/Users/spolifro/Documents/rocCV/include/kernels/host/composite_host.hpp</includedby>
    <includedby refid="normalize__host_8hpp" local="yes">/mnt/c/Users/spolifro/Documents/rocCV/include/kernels/host/normalize_host.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>/mnt/c/Users/spolifro/Documents/rocCV/include/core/detail/casting.hpp</label>
        <link refid="casting_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>core/detail/type_traits.hpp</label>
        <link refid="type__traits_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
      <node id="4">
        <label>hip/hip_runtime.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/mnt/c/Users/spolifro/Documents/rocCV/include/core/detail/casting.hpp</label>
        <link refid="casting_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/mnt/c/Users/spolifro/Documents/rocCV/include/core/wrappers/interpolation_wrapper.hpp</label>
        <link refid="interpolation__wrapper_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/mnt/c/Users/spolifro/Documents/rocCV/include/kernels/device/bilateral_filter_device.hpp</label>
        <link refid="bilateral__filter__device_8hpp"/>
      </node>
      <node id="5">
        <label>/mnt/c/Users/spolifro/Documents/rocCV/include/kernels/device/composite_device.hpp</label>
        <link refid="composite__device_8hpp"/>
      </node>
      <node id="6">
        <label>/mnt/c/Users/spolifro/Documents/rocCV/include/kernels/device/normalize_device.hpp</label>
        <link refid="normalize__device_8hpp"/>
      </node>
      <node id="4">
        <label>/mnt/c/Users/spolifro/Documents/rocCV/include/kernels/device/warp_perspective_device.hpp</label>
        <link refid="warp__perspective__device_8hpp"/>
      </node>
      <node id="7">
        <label>/mnt/c/Users/spolifro/Documents/rocCV/include/kernels/host/bilateral_filter_host.hpp</label>
        <link refid="bilateral__filter__host_8hpp"/>
      </node>
      <node id="8">
        <label>/mnt/c/Users/spolifro/Documents/rocCV/include/kernels/host/composite_host.hpp</label>
        <link refid="composite__host_8hpp"/>
      </node>
      <node id="9">
        <label>/mnt/c/Users/spolifro/Documents/rocCV/include/kernels/host/normalize_host.hpp</label>
        <link refid="normalize__host_8hpp"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespaceroccv">roccv</innernamespace>
    <innernamespace refid="namespaceroccv_1_1detail">roccv::detail</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2025<sp/>Advanced<sp/>Micro<sp/>Devices,<sp/>Inc.<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__traits_8hpp" kindref="compound">core/detail/type_traits.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceroccv_1_1detail" kindref="compound">roccv::detail</ref><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>=<sp/>std::enable_if_t&lt;!IsCompound&lt;T&gt;<sp/>&amp;&amp;<sp/>!IsCompound&lt;U&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="34" refid="namespaceroccv_1_1detail_1a2624260944ce343286d9dd0ed2fe3cef" refkind="member"><highlight class="normal">__device__<sp/>__host__<sp/>T<sp/><ref refid="namespaceroccv_1_1detail_1a2624260944ce343286d9dd0ed2fe3cef" kindref="member">ScalarSaturateCast</ref>(U<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>smallToBig<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(U)<sp/>&lt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bigToSmall<sp/>=<sp/>!smallToBig;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_integral_v&lt;T&gt;<sp/>&amp;&amp;<sp/>std::is_floating_point_v&lt;U&gt;)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Any<sp/>float<sp/>-&gt;<sp/>any<sp/>integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::clamp&lt;U&gt;(std::round(v),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">U</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::numeric_limits&lt;T&gt;::min()),</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">U</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::numeric_limits&lt;T&gt;::max())));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_integral_v&lt;T&gt;<sp/>&amp;&amp;<sp/>std::is_integral_v&lt;U&gt;<sp/>&amp;&amp;<sp/>std::is_signed_v&lt;U&gt;<sp/>&amp;&amp;<sp/>std::is_signed_v&lt;T&gt;<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smallToBig)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Any<sp/>integral<sp/>signed<sp/>-&gt;<sp/>Any<sp/>integral<sp/>unsigned,<sp/>small<sp/>-&gt;<sp/>big<sp/>or<sp/>equal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v<sp/>&lt;=<sp/>0<sp/>?<sp/>0<sp/>:<sp/>static_cast&lt;T&gt;(v);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_integral_v&lt;U&gt;<sp/>&amp;&amp;<sp/>std::is_integral_v&lt;T&gt;<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((std::is_signed_v&lt;U&gt;<sp/>&amp;&amp;<sp/>std::is_signed_v&lt;T&gt;)<sp/>||</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(std::is_unsigned_v&lt;U&gt;<sp/>&amp;&amp;<sp/>std::is_unsigned_v&lt;T&gt;))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bigToSmall)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Any<sp/>integral<sp/>signed<sp/>-&gt;<sp/>Any<sp/>integral<sp/>signed,<sp/>big<sp/>-&gt;<sp/>small</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Any<sp/>integral<sp/>unsigned<sp/>-&gt;<sp/>Any<sp/>integral<sp/>unsigned,<sp/>big<sp/>-&gt;<sp/>small</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v<sp/>&lt;=<sp/>std::numeric_limits&lt;T&gt;::min()</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>std::numeric_limits&lt;T&gt;::min()</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(v<sp/>&gt;=<sp/>std::numeric_limits&lt;T&gt;::max()<sp/>?<sp/>std::numeric_limits&lt;T&gt;::max()<sp/>:<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_integral_v&lt;U&gt;<sp/>&amp;&amp;<sp/>std::is_unsigned_v&lt;U&gt;<sp/>&amp;&amp;<sp/>std::is_integral_v&lt;T&gt;<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_signed_v&lt;T&gt;)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Any<sp/>integral<sp/>unsigned<sp/>-&gt;<sp/>Any<sp/>integral<sp/>signed,<sp/>small<sp/>-&gt;<sp/>big<sp/>or<sp/>equal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v<sp/>&gt;=<sp/>std::numeric_limits&lt;T&gt;::max()<sp/>?<sp/>std::numeric_limits&lt;T&gt;::max()<sp/>:<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_integral_v&lt;U&gt;<sp/>&amp;&amp;<sp/>std::is_signed_v&lt;U&gt;<sp/>&amp;&amp;<sp/>std::is_integral_v&lt;T&gt;<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_unsigned_v&lt;T&gt;<sp/>&amp;&amp;<sp/>bigToSmall)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Any<sp/>integral<sp/>signed<sp/>-&gt;<sp/>Any<sp/>integral<sp/>unsigned,<sp/>big<sp/>-&gt;<sp/>small</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v<sp/>&lt;=<sp/>static_cast&lt;U&gt;(std::numeric_limits&lt;T&gt;::min())</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>std::numeric_limits&lt;T&gt;::min()</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(v<sp/>&gt;=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">U</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::numeric_limits&lt;T&gt;::max())<sp/>?<sp/>std::numeric_limits&lt;T&gt;::max</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>other<sp/>cases<sp/>fall<sp/>into<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">=<sp/>std::enable_if_t&lt;(HasTypeTraits&lt;T&gt;<sp/>&amp;&amp;<sp/>HasTypeTraits&lt;U&gt;)<sp/>&amp;&amp;<sp/>(NumElements&lt;T&gt;<sp/>&lt;=<sp/>NumElements&lt;U&gt;)&gt;&gt;</highlight></codeline>
<codeline lineno="85" refid="namespaceroccv_1_1detail_1a05175914f40cf839a197f5e6921a2d0b" refkind="member"><highlight class="normal">__device__<sp/>__host__<sp/>T<sp/><ref refid="namespaceroccv_1_1detail_1a05175914f40cf839a197f5e6921a2d0b" kindref="member">SaturateCast</ref>(U<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_same_v&lt;T,<sp/>U&gt;)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>ret{};</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceroccv_1_1detail_1adda0c1378cee5d0c6a24c6d78fc0f0da" kindref="member">GetElement</ref>(ret,<sp/>0)<sp/>=<sp/>ScalarSaturateCast&lt;BaseType&lt;T&gt;&gt;(<ref refid="namespaceroccv_1_1detail_1adda0c1378cee5d0c6a24c6d78fc0f0da" kindref="member">GetElement</ref>(v,<sp/>0));</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(NumElements&lt;T&gt;<sp/>&gt;=<sp/>2)<sp/><ref refid="namespaceroccv_1_1detail_1adda0c1378cee5d0c6a24c6d78fc0f0da" kindref="member">GetElement</ref>(ret,<sp/>1)<sp/>=<sp/>ScalarSaturateCast&lt;BaseType&lt;T&gt;&gt;(<ref refid="namespaceroccv_1_1detail_1adda0c1378cee5d0c6a24c6d78fc0f0da" kindref="member">GetElement</ref>(v,<sp/>1));</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(NumElements&lt;T&gt;<sp/>&gt;=<sp/>3)<sp/><ref refid="namespaceroccv_1_1detail_1adda0c1378cee5d0c6a24c6d78fc0f0da" kindref="member">GetElement</ref>(ret,<sp/>2)<sp/>=<sp/>ScalarSaturateCast&lt;BaseType&lt;T&gt;&gt;(<ref refid="namespaceroccv_1_1detail_1adda0c1378cee5d0c6a24c6d78fc0f0da" kindref="member">GetElement</ref>(v,<sp/>2));</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(NumElements&lt;T&gt;<sp/>&gt;=<sp/>4)<sp/><ref refid="namespaceroccv_1_1detail_1adda0c1378cee5d0c6a24c6d78fc0f0da" kindref="member">GetElement</ref>(ret,<sp/>3)<sp/>=<sp/>ScalarSaturateCast&lt;BaseType&lt;T&gt;&gt;(<ref refid="namespaceroccv_1_1detail_1adda0c1378cee5d0c6a24c6d78fc0f0da" kindref="member">GetElement</ref>(v,<sp/>3));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">=<sp/>std::enable_if_t&lt;(HasTypeTraits&lt;T&gt;<sp/>&amp;&amp;<sp/>HasTypeTraits&lt;U&gt;)<sp/>&amp;&amp;<sp/>(!IsCompound&lt;T&gt;<sp/>&amp;&amp;<sp/>!IsCompound&lt;U&gt;)&gt;&gt;</highlight></codeline>
<codeline lineno="105" refid="namespaceroccv_1_1detail_1ac50c951f995414d6feda198154de209b" refkind="member"><highlight class="normal">__device__<sp/>__host__<sp/>T<sp/><ref refid="namespaceroccv_1_1detail_1ac50c951f995414d6feda198154de209b" kindref="member">ScalarRangeCast</ref>(U<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_same_v&lt;T,<sp/>U&gt;)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_integral_v&lt;T&gt;<sp/>&amp;&amp;<sp/>std::is_floating_point_v&lt;U&gt;)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Float<sp/>to<sp/>any<sp/>integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Signed<sp/>integer<sp/>values<sp/>accept<sp/>float<sp/>ranges<sp/>in<sp/>[-1.0,<sp/>1.0]<sp/>while<sp/>unsigned<sp/>integer<sp/>values<sp/>accept<sp/>float<sp/>values<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[0.0,<sp/>1.0].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>minClamp<sp/>=<sp/>std::is_signed_v&lt;T&gt;<sp/>?<sp/>-1.0f<sp/>:<sp/>0.0f;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::round(std::clamp&lt;U&gt;(v,<sp/>minClamp,<sp/>1.0f)<sp/>*<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">U</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::numeric_limits&lt;T&gt;::max())));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_floating_point_v&lt;T&gt;<sp/>&amp;&amp;<sp/>std::is_integral_v&lt;U&gt;)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Any<sp/>integer<sp/>to<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v)<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::numeric_limits&lt;U&gt;::max());</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>other<sp/>cases<sp/>reduce<sp/>to<sp/>a<sp/>saturate<sp/>cast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ScalarSaturateCast&lt;T&gt;(v);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">=<sp/>std::enable_if_t&lt;(HasTypeTraits&lt;T&gt;<sp/>&amp;&amp;<sp/>HasTypeTraits&lt;U&gt;)<sp/>&amp;&amp;<sp/>NumElements&lt;T&gt;<sp/>&lt;=<sp/>NumElements&lt;U&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="144"><highlight class="normal">__device__<sp/>__host__<sp/>T<sp/>RangeCast(U<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_same_v&lt;T,<sp/>U&gt;)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>ret{};</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceroccv_1_1detail_1adda0c1378cee5d0c6a24c6d78fc0f0da" kindref="member">GetElement</ref>(ret,<sp/>0)<sp/>=<sp/>ScalarRangeCast&lt;BaseType&lt;T&gt;&gt;(<ref refid="namespaceroccv_1_1detail_1adda0c1378cee5d0c6a24c6d78fc0f0da" kindref="member">GetElement</ref>(v,<sp/>0));</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(NumElements&lt;T&gt;<sp/>&gt;=<sp/>2)<sp/><ref refid="namespaceroccv_1_1detail_1adda0c1378cee5d0c6a24c6d78fc0f0da" kindref="member">GetElement</ref>(ret,<sp/>1)<sp/>=<sp/>ScalarRangeCast&lt;BaseType&lt;T&gt;&gt;(<ref refid="namespaceroccv_1_1detail_1adda0c1378cee5d0c6a24c6d78fc0f0da" kindref="member">GetElement</ref>(v,<sp/>1));</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(NumElements&lt;T&gt;<sp/>&gt;=<sp/>3)<sp/><ref refid="namespaceroccv_1_1detail_1adda0c1378cee5d0c6a24c6d78fc0f0da" kindref="member">GetElement</ref>(ret,<sp/>2)<sp/>=<sp/>ScalarRangeCast&lt;BaseType&lt;T&gt;&gt;(<ref refid="namespaceroccv_1_1detail_1adda0c1378cee5d0c6a24c6d78fc0f0da" kindref="member">GetElement</ref>(v,<sp/>2));</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(NumElements&lt;T&gt;<sp/>&gt;=<sp/>4)<sp/><ref refid="namespaceroccv_1_1detail_1adda0c1378cee5d0c6a24c6d78fc0f0da" kindref="member">GetElement</ref>(ret,<sp/>3)<sp/>=<sp/>ScalarRangeCast&lt;BaseType&lt;T&gt;&gt;(<ref refid="namespaceroccv_1_1detail_1adda0c1378cee5d0c6a24c6d78fc0f0da" kindref="member">GetElement</ref>(v,<sp/>3));</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">=<sp/>std::enable_if_t&lt;(HasTypeTraits&lt;T&gt;<sp/>&amp;&amp;<sp/>HasTypeTraits&lt;U&gt;)<sp/>&amp;&amp;<sp/>NumElements&lt;T&gt;<sp/>&lt;=<sp/>NumElements&lt;U&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="169"><highlight class="normal">__device__<sp/>__host__<sp/>T<sp/>StaticCast(U<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_same_v&lt;T,<sp/>U&gt;)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Both<sp/>same<sp/>type,<sp/>just<sp/>return<sp/>the<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(!IsCompound&lt;T&gt;<sp/>&amp;&amp;<sp/>!IsCompound&lt;U&gt;)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Both<sp/>scalar<sp/>values.<sp/>Reduces<sp/>to<sp/>a<sp/>standard<sp/>static<sp/>cast.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Vector<sp/>types.<sp/>Perform<sp/>casting<sp/>on<sp/>each<sp/>element.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>ret{};</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceroccv_1_1detail_1adda0c1378cee5d0c6a24c6d78fc0f0da" kindref="member">GetElement</ref>(ret,<sp/>0)<sp/>=<sp/>StaticCast&lt;BaseType&lt;T&gt;&gt;(<ref refid="namespaceroccv_1_1detail_1adda0c1378cee5d0c6a24c6d78fc0f0da" kindref="member">GetElement</ref>(v,<sp/>0));</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(NumElements&lt;T&gt;<sp/>&gt;=<sp/>2)<sp/><ref refid="namespaceroccv_1_1detail_1adda0c1378cee5d0c6a24c6d78fc0f0da" kindref="member">GetElement</ref>(ret,<sp/>1)<sp/>=<sp/>StaticCast&lt;BaseType&lt;T&gt;&gt;(<ref refid="namespaceroccv_1_1detail_1adda0c1378cee5d0c6a24c6d78fc0f0da" kindref="member">GetElement</ref>(v,<sp/>1));</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(NumElements&lt;T&gt;<sp/>&gt;=<sp/>3)<sp/><ref refid="namespaceroccv_1_1detail_1adda0c1378cee5d0c6a24c6d78fc0f0da" kindref="member">GetElement</ref>(ret,<sp/>2)<sp/>=<sp/>StaticCast&lt;BaseType&lt;T&gt;&gt;(<ref refid="namespaceroccv_1_1detail_1adda0c1378cee5d0c6a24c6d78fc0f0da" kindref="member">GetElement</ref>(v,<sp/>2));</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(NumElements&lt;T&gt;<sp/>&gt;=<sp/>4)<sp/><ref refid="namespaceroccv_1_1detail_1adda0c1378cee5d0c6a24c6d78fc0f0da" kindref="member">GetElement</ref>(ret,<sp/>3)<sp/>=<sp/>StaticCast&lt;BaseType&lt;T&gt;&gt;(<ref refid="namespaceroccv_1_1detail_1adda0c1378cee5d0c6a24c6d78fc0f0da" kindref="member">GetElement</ref>(v,<sp/>3));</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>roccv::detail</highlight></codeline>
    </programlisting>
    <location file="/mnt/c/Users/spolifro/Documents/rocCV/include/core/detail/casting.hpp"/>
  </compounddef>
</doxygen>
