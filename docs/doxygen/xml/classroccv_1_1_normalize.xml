<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classroccv_1_1_normalize" kind="class" language="C++" prot="public" final="yes">
    <compoundname>roccv::Normalize</compoundname>
    <basecompoundref refid="classroccv_1_1_i_operator" prot="public" virt="non-virtual">roccv::IOperator</basecompoundref>
    <includes refid="op__normalize_8hpp" local="no">op_normalize.hpp</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classroccv_1_1_normalize_1ad48784a1a73afa24786a328ffb79f4dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>roccv::Normalize::Normalize</definition>
        <argsstring>()</argsstring>
        <name>Normalize</name>
        <qualifiedname>roccv::Normalize::Normalize</qualifiedname>
        <briefdescription>
<para>Constructs an OpNormalize object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/spolifro/Documents/rocCV/include/op_normalize.hpp" line="46" column="5" bodyfile="/mnt/c/Users/spolifro/Documents/rocCV/include/op_normalize.hpp" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classroccv_1_1_normalize_1a381b969d9634fc1cfb48a8d1648c0ffa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void roccv::Normalize::operator()</definition>
        <argsstring>(hipStream_t stream, const Tensor &amp;input, const Tensor &amp;base, const Tensor &amp;scale, const Tensor &amp;output, float global_scale, float shift, float epsilon, uint32_t flags, const eDeviceType device=eDeviceType::GPU) const</argsstring>
        <name>operator()</name>
        <qualifiedname>roccv::Normalize::operator()</qualifiedname>
        <param>
          <type>hipStream_t</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="classroccv_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const <ref refid="classroccv_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="classroccv_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>const <ref refid="classroccv_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>float</type>
          <declname>global_scale</declname>
        </param>
        <param>
          <type>float</type>
          <declname>shift</declname>
        </param>
        <param>
          <type>float</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>const <ref refid="util__enums_8h_1a4ec2e35c9447ccc1764ba80c1490a114" kindref="member">eDeviceType</ref></type>
          <declname>device</declname>
          <defval><ref refid="util__enums_8h_1a4ec2e35c9447ccc1764ba80c1490a114a52f9ec21735243ad9917cda3ca077d32" kindref="member">eDeviceType::GPU</ref></defval>
        </param>
        <briefdescription>
<para>Executes the <ref refid="classroccv_1_1_normalize" kindref="compound">Normalize</ref> operation on the given HIP stream. </para>
        </briefdescription>
        <detaileddescription>
<para>Normalization subtracts the base and multiplies by a provided scale value. It is calculated as follows:</para>
<para>output[idx] = (input[idx] - base[param_idx]) * scale[param_idx] * global_scale + shift</para>
<para>Optionally, if the ROCCV_NORMALIZE_SCALE_IS_STDDEV flag is set, the scale tensor is interpreted as the standard deviation and will be calculated as follows (where epsilon is provided to ensure numerical stability):</para>
<para>output[idx] = (input[idx] - base[param_idx]) * (1 / sqrt(sqr(scale[param_idx]) + epsilon)) * global_scale + shift.</para>
<para>Limitations:</para>
<para>Input: Supported TensorLayout(s): [NHWC, HWC] Supported DataType(s): [U8, S8, S16, U32, S32, F32]</para>
<para>Output: Supported TensorLayout(s): [NHWC, HWC] Supported DataType(s): [U8, S8, S16, U32, S32, F32]</para>
<para>base: Supported TensorLayout(s): [NHWC, HWC] Supported DataType(s): [F32]</para>
<para>scale: Supported TensorLayout(s): [NHWC, HWC] Supported DataType(s): [F32]</para>
<para>Input/Output dependency: <verbatim>  Property      |  Input == Output
 -------------- | -------------
  TensorLayout  | Yes
  DataType      | Yes
  Channels      | Yes
  Width         | Yes
  Height        | Yes
  Batch         | Yes
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>The HIP stream to run this operation on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">input</parametername>
</parameternamelist>
<parameterdescription>
<para>Input tensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>A tensor containing base values. Layout must match that of the input/output tensors. Shape dimensions can either be 1, signifying that the base will be masked across that dimension, or match the corresponding dimension of the input/output tensor&apos;s shape in the image. For example, a shape of [1, 1, 1, C] will apply the base value across the channel dimension of the image, and a shape of [1, 1, W, C] will apply the base value across the width and channel dimensions (where W corresponds to the image width and C corresponds to the channel count). The channel count must match that of the input/output images. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scale</parametername>
</parameternamelist>
<parameterdescription>
<para>A tensor containing scale values. This tensor exhibits the same rules as the base tensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output</parametername>
</parameternamelist>
<parameterdescription>
<para>Output tensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">global_scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Scales the output by a constant value after normalization. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shift</parametername>
</parameternamelist>
<parameterdescription>
<para>Shifts the value after scaling. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>An epsilon value to add to the standard deviation to ensure numerical stability. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags to specify the behavior of the normalization. If ROCCV_NORMALIZE_SCALE_IS_STDDEV is set, the scale tensor will be interpreted at the standard deviation values rather than the scale. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">device</parametername>
</parameternamelist>
<parameterdescription>
<para>The device which this operation should run on. (Default: <ref refid="util__enums_8h_1a4ec2e35c9447ccc1764ba80c1490a114a52f9ec21735243ad9917cda3ca077d32" kindref="member">eDeviceType::GPU</ref>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/spolifro/Documents/rocCV/include/op_normalize.hpp" line="112" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classroccv_1_1_normalize_1a503917cd5f8939025db5ecea6018e62f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>roccv::Normalize::~Normalize</definition>
        <argsstring>()</argsstring>
        <name>~Normalize</name>
        <qualifiedname>roccv::Normalize::~Normalize</qualifiedname>
        <briefdescription>
<para>Destroy the Op <ref refid="classroccv_1_1_normalize" kindref="compound">Normalize</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/spolifro/Documents/rocCV/include/op_normalize.hpp" line="51" column="5" bodyfile="/mnt/c/Users/spolifro/Documents/rocCV/include/op_normalize.hpp" bodystart="51" bodyend="51"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Class for managing the <ref refid="classroccv_1_1_normalize" kindref="compound">Normalize</ref> operator. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>roccv::IOperator</label>
        <link refid="classroccv_1_1_i_operator"/>
      </node>
      <node id="1">
        <label>roccv::Normalize</label>
        <link refid="classroccv_1_1_normalize"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>roccv::IOperator</label>
        <link refid="classroccv_1_1_i_operator"/>
      </node>
      <node id="1">
        <label>roccv::Normalize</label>
        <link refid="classroccv_1_1_normalize"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/mnt/c/Users/spolifro/Documents/rocCV/include/op_normalize.hpp" line="40" column="1" bodyfile="/mnt/c/Users/spolifro/Documents/rocCV/include/op_normalize.hpp" bodystart="40" bodyend="115"/>
    <listofallmembers>
      <member refid="classroccv_1_1_normalize_1ad48784a1a73afa24786a328ffb79f4dd" prot="public" virt="non-virtual"><scope>roccv::Normalize</scope><name>Normalize</name></member>
      <member refid="classroccv_1_1_normalize_1a381b969d9634fc1cfb48a8d1648c0ffa" prot="public" virt="non-virtual"><scope>roccv::Normalize</scope><name>operator()</name></member>
      <member refid="classroccv_1_1_i_operator_1ab7247b4825f7803f16d0d48fa6ad4226" prot="public" virt="virtual"><scope>roccv::Normalize</scope><name>~IOperator</name></member>
      <member refid="classroccv_1_1_normalize_1a503917cd5f8939025db5ecea6018e62f" prot="public" virt="non-virtual"><scope>roccv::Normalize</scope><name>~Normalize</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
